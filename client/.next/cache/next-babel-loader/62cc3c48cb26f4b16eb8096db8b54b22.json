{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport cookie from 'js-cookie';\nimport Router from 'next/router'; // set in cookie\n\nexport const setCookie = (key, value) => {\n  if (false) {\n    cookie.set(key, value, {\n      expires: 1\n    });\n  }\n}; // remove from cookie\n\nexport const removeCookie = key => {\n  if (false) {\n    cookie.remove(key);\n  }\n}; // get from cookie such as stored token\n// will be useful when we need to make request to server with auth token\n\nexport const getCookie = key => {\n  if (false) {\n    return cookie.get(key);\n  }\n}; // set in localstoarge\n\nexport const setLocalStorage = (key, value) => {\n  if (false) {\n    localStorage.setItem(key, _JSON$stringify(value));\n  }\n}; // remove from localstorage\n\nexport const removeLocalStorage = key => {\n  if (false) {\n    localStorage.removeItem(key);\n  }\n}; // authenticate user by passing data to cookie and localstorage during signin\n\nexport const authenticate = (response, next) => {\n  setCookie('token', response.data.token);\n  setLocalStorage('user', response.data.user);\n  next();\n}; // access user info from localstorage\n\nexport const isAuth = () => {\n  if (false) {\n    const cookieChecked = getCookie('token');\n\n    if (cookieChecked) {\n      if (localStorage.getItem('user')) {\n        return JSON.parse(localStorage.getItem('user'));\n      } else {\n        return false;\n      }\n    }\n  }\n};\nexport const logout = () => {\n  removeCookie('token');\n  removeLocalStorage('user');\n  Router.push('/login');\n};","map":{"version":3,"sources":["E:/ANA-website/client/helpers/auth.js"],"names":["cookie","Router","setCookie","key","value","set","expires","removeCookie","remove","getCookie","get","setLocalStorage","localStorage","setItem","removeLocalStorage","removeItem","authenticate","response","next","data","token","user","isAuth","cookieChecked","getItem","JSON","parse","logout","push"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACrC,aAAqB;AACjBJ,IAAAA,MAAM,CAACK,GAAP,CAAWF,GAAX,EAAgBC,KAAhB,EAAuB;AACnBE,MAAAA,OAAO,EAAE;AADU,KAAvB;AAGH;AACJ,CANM,C,CAQP;;AACA,OAAO,MAAMC,YAAY,GAAGJ,GAAG,IAAI;AAC/B,aAAqB;AACjBH,IAAAA,MAAM,CAACQ,MAAP,CAAcL,GAAd;AACH;AACJ,CAJM,C,CAMP;AACA;;AACA,OAAO,MAAMM,SAAS,GAAGN,GAAG,IAAI;AAC5B,aAAqB;AACjB,WAAOH,MAAM,CAACU,GAAP,CAAWP,GAAX,CAAP;AACH;AACJ,CAJM,C,CAMP;;AACA,OAAO,MAAMQ,eAAe,GAAG,CAACR,GAAD,EAAMC,KAAN,KAAgB;AAC3C,aAAqB;AACjBQ,IAAAA,YAAY,CAACC,OAAb,CAAqBV,GAArB,EAA0B,gBAAeC,KAAf,CAA1B;AACH;AACJ,CAJM,C,CAMP;;AACA,OAAO,MAAMU,kBAAkB,GAAGX,GAAG,IAAI;AACrC,aAAqB;AACjBS,IAAAA,YAAY,CAACG,UAAb,CAAwBZ,GAAxB;AACH;AACJ,CAJM,C,CAMP;;AACA,OAAO,MAAMa,YAAY,GAAG,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC5ChB,EAAAA,SAAS,CAAC,OAAD,EAAUe,QAAQ,CAACE,IAAT,CAAcC,KAAxB,CAAT;AACAT,EAAAA,eAAe,CAAC,MAAD,EAASM,QAAQ,CAACE,IAAT,CAAcE,IAAvB,CAAf;AACAH,EAAAA,IAAI;AACP,CAJM,C,CAMP;;AACA,OAAO,MAAMI,MAAM,GAAG,MAAM;AACxB,aAAqB;AACjB,UAAMC,aAAa,GAAGd,SAAS,CAAC,OAAD,CAA/B;;AACA,QAAIc,aAAJ,EAAmB;AACf,UAAIX,YAAY,CAACY,OAAb,CAAqB,MAArB,CAAJ,EAAkC;AAC9B,eAAOC,IAAI,CAACC,KAAL,CAAWd,YAAY,CAACY,OAAb,CAAqB,MAArB,CAAX,CAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ;AACJ;AACJ,CAXM;AAaP,OAAO,MAAMG,MAAM,GAAG,MAAM;AACxBpB,EAAAA,YAAY,CAAC,OAAD,CAAZ;AACAO,EAAAA,kBAAkB,CAAC,MAAD,CAAlB;AACAb,EAAAA,MAAM,CAAC2B,IAAP,CAAY,QAAZ;AACH,CAJM","sourcesContent":["import cookie from 'js-cookie';\nimport Router from 'next/router';\n\n// set in cookie\nexport const setCookie = (key, value) => {\n    if (process.browser) {\n        cookie.set(key, value, {\n            expires: 1\n        });\n    }\n};\n\n// remove from cookie\nexport const removeCookie = key => {\n    if (process.browser) {\n        cookie.remove(key);\n    }\n};\n\n// get from cookie such as stored token\n// will be useful when we need to make request to server with auth token\nexport const getCookie = key => {\n    if (process.browser) {\n        return cookie.get(key);\n    }\n};\n\n// set in localstoarge\nexport const setLocalStorage = (key, value) => {\n    if (process.browser) {\n        localStorage.setItem(key, JSON.stringify(value));\n    }\n};\n\n// remove from localstorage\nexport const removeLocalStorage = key => {\n    if (process.browser) {\n        localStorage.removeItem(key);\n    }\n};\n\n// authenticate user by passing data to cookie and localstorage during signin\nexport const authenticate = (response, next) => {\n    setCookie('token', response.data.token);\n    setLocalStorage('user', response.data.user);\n    next();\n};\n\n// access user info from localstorage\nexport const isAuth = () => {\n    if (process.browser) {\n        const cookieChecked = getCookie('token');\n        if (cookieChecked) {\n            if (localStorage.getItem('user')) {\n                return JSON.parse(localStorage.getItem('user'));\n            } else {\n                return false;\n            }\n        }\n    }\n};\n\nexport const logout = () => {\n    removeCookie('token');\n    removeLocalStorage('user');\n    Router.push('/login');\n};\n"]},"metadata":{},"sourceType":"module"}